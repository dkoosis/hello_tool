# File: Taskfile.yml
version: "3"

vars:
  SERVICE_NAME: hello-tool-base
  BINARY_NAME: "{{.SERVICE_NAME}}"
  # Native binary will be just BINARY_NAME. Linux binary for deployment will be BINARY_NAME-linux-amd64
  BINARY_NAME_LINUX: "{{.BINARY_NAME}}-linux-amd64" # For the linux build
  MODULE_PATH: github.com/dkoosis/hello-tool-base
  CMD_PATH: ./cmd/{{.SERVICE_NAME}}
  SCRIPT_DIR: ./scripts

  # Variables derived from the git environment where 'task' is run.
  VERSION_FROM_GIT:
    sh: git describe --tags --always --dirty --match=v* 2>/dev/null || echo "dev-from-git"
  COMMIT_HASH_FROM_GIT:
    sh: git rev-parse --short HEAD 2>/dev/null || echo "unknown-from-git"
  BUILD_DATE: # Used for local builds and potentially could be passed to Cloud Build if needed
    sh: date -u '+%Y-%m-%dT%H:%M:%SZ'

  # Common LDFLAGS for Go builds, incorporating version information.
  LDFLAGS_COMMON: "-s -w -X {{.MODULE_PATH}}/internal/buildinfo.Version={{.VERSION_FROM_GIT}} -X {{.MODULE_PATH}}/internal/buildinfo.CommitHash={{.COMMIT_HASH_FROM_GIT}} -X {{.MODULE_PATH}}/internal/buildinfo.BuildDate={{.BUILD_DATE}}"

  # Tool versions
  GOLANGCILINT_VERSION: latest # Or a specific version e.g., v1.57.2
  GOTESTSUM_VERSION: latest # Or a specific version

  # File length check thresholds
  WARN_LINES: 350
  FAIL_LINES: 1500

  # GCP Configuration (dynamically fetched or defaults)
  PROJECT_ID:
    sh: gcloud config get-value project 2>/dev/null || echo "" # Will be empty if not set, checked in _check-gcp-project
  GCP_REGION: us-central1 # Default region, adjust if necessary
  ARTIFACT_REGISTRY_REPO: my-go-apps # Default repo name, adjust if necessary
  CLOUDBUILD_CONFIG_PATH: ./build/cloudbuild/cloudbuild.yaml

  # Substitutions string for Google Cloud Build.
  # These use the versions derived from the local git environment for _MAKEFILE_ prefixed vars.
  GCLOUD_BUILD_SUBSTITUTIONS: "_SERVICE_NAME={{.SERVICE_NAME}},_REGION={{.GCP_REGION}},_ARTIFACT_REGISTRY_REPO={{.ARTIFACT_REGISTRY_REPO}},_MODULE_PATH={{.MODULE_PATH}},_MAKEFILE_VERSION={{.VERSION_FROM_GIT}},_MAKEFILE_COMMIT={{.COMMIT_HASH_FROM_GIT}}"

  # Variables for current Go environment (native OS/Arch)
  NATIVE_GOOS:
    sh: go env GOOS
  NATIVE_GOARCH:
    sh: go env GOARCH

env:
  CGO_ENABLED: 0 # Global Go build environment variable to disable CGO

output: prefixed # Prefixes output lines with the task name

tasks:
  default:
    desc: "Default task: runs all local checks, tests, and builds the native binary."
    cmds:
      - task: all

  all:
    desc: "Runs all checks, tests, and builds the native binary locally."
    cmds:
      - task: check-gomod
      - task: modt
      - task: fmt
      - task: lint
      - task: check-line-length
      - task: test
      - task: build-native # Ensures a runnable binary for the local OS is built
      - cmd: echo "[SUCCESS] All pre-build tasks completed successfully. Native binary '{{.BINARY_NAME}}' is ready."

  build-linux:
    desc: "Builds the Go binary for Linux AMD64 (for Docker/Cloud Run)."
    cmds:
      - cmd: echo "[INFO] Building for Linux AMD64 with Version {{.VERSION_FROM_GIT}}, Commit {{.COMMIT_HASH_FROM_GIT}}, Build Date {{.BUILD_DATE}}"
      - cmd: GOOS=linux GOARCH=amd64 go build -ldflags="{{.LDFLAGS_COMMON}}" -o {{.BINARY_NAME_LINUX}} {{.CMD_PATH}}
      - cmd: echo "[INFO] Linux AMD64 binary '{{.BINARY_NAME_LINUX}}' built successfully."

  build-native:
    desc: "Builds the Go binary for the current native OS/architecture."
    cmds:
      - cmd: echo "[INFO] Building for native OS/Arch ({{.NATIVE_GOOS}}-{{.NATIVE_GOARCH}}) with Version {{.VERSION_FROM_GIT}}, Commit {{.COMMIT_HASH_FROM_GIT}}, Build Date {{.BUILD_DATE}}"
      - cmd: go build -ldflags="{{.LDFLAGS_COMMON}}" -o {{.BINARY_NAME}} {{.CMD_PATH}} # No GOOS/GOARCH set, defaults to native
      - cmd: echo "[INFO] Native binary '{{.BINARY_NAME}}' built successfully."

  run:
    desc: "Builds (native) and runs the Go binary locally."
    deps: [build-native] # Ensures native binary is built before running
    cmds:
      - cmd: echo "[INFO] Running native binary '{{.BINARY_NAME}}'..."
      - cmd: ./{{.BINARY_NAME}}
        env: # Optional: Pass environment variables for local run
          LOG_LEVEL: "debug"
          # CONFIG_PATH: "configs/local.yaml" # Example: if you have a local config
          # SERVER_PORT: "8080" # Example: if you want to override default port

  clean:
    desc: "Removes build artifacts and clears Go caches."
    cmds:
      - cmd: rm -f {{.BINARY_NAME}} {{.BINARY_NAME_LINUX}} coverage.out
      - cmd: go clean -cache -testcache # Clears Go's build and test caches
      - cmd: echo "[INFO] Cleaned build artifacts and caches."

  modt:
    desc: "Tidies and downloads Go modules."
    cmds:
      - cmd: go mod tidy -v
      - cmd: go mod download

  test:
    desc: "Runs Go tests with race detector and coverage."
    cmds:
      - task: install-tools # Ensures testing tools are present
      - cmd: gotestsum --format testdox -- -race -coverprofile=coverage.out -covermode=atomic ./...

  test-debug:
    desc: "Runs Go tests verbosely with race detector (sets LOG_LEVEL=debug)."
    env:
      LOG_LEVEL: debug # For verbose logging from the application during tests
    cmds:
      - task: install-tools
      - cmd: go test -v -race -count=1 -coverprofile=coverage.out ./...

  fmt:
    desc: "Formats Go code using golangci-lint and tidies modules."
    cmds:
      - task: install-tools
      - cmd: golangci-lint fmt ./...
      - cmd: go mod tidy -v # Ensures go.mod is tidy after formatting

  lint:
    desc: "Lints Go code using golangci-lint."
    cmds:
      - task: install-tools
      - cmd: golangci-lint run ./...

  check-gomod:
    desc: "Checks if the Go module path in go.mod matches the expected MODULE_PATH."
    cmds:
      - cmd: "{{.SCRIPT_DIR}}/check_go_mod_path.sh {{.MODULE_PATH}}"

  check-line-length:
    desc: "Checks for Go files exceeding specified line lengths."
    cmds:
      # The '|| true' ensures this task doesn't fail the whole chain if warnings are found,
      # as the script exits 0 on warnings, 1 on errors.
      - cmd: '{{.SCRIPT_DIR}}/check_file_length.sh {{.WARN_LINES}} {{.FAIL_LINES}} $(find . -name "*.go" -not -path "./vendor/*" -not -path "./.git/*") || true'

  check-vulns:
    desc: "Checks for vulnerabilities in Go dependencies using govulncheck."
    cmds:
      - | # Using a multi-line script block for cleaner conditional logic
        if ! command -v govulncheck >/dev/null 2>&1; then
          echo "[INFO] govulncheck not found, attempting to install..."
          go install golang.org/x/vuln/cmd/govulncheck@latest
        fi
        echo "[INFO] Running govulncheck..."
        govulncheck ./...
        echo "[INFO] govulncheck completed."

  install-tools:
    desc: "Installs necessary Go development tools if not already present or if version differs."
    cmds:
      - cmd: echo "[INFO] Checking/installing tools on {{.NATIVE_GOOS}}-{{.NATIVE_GOARCH}}..."
      - |
        # Check for golangci-lint
        INSTALLED_GCL_VERSION=$(golangci-lint --version 2>/dev/null | awk '{print $4}') # Gets the version string like "v1.50.0"
        TARGET_GCL_VERSION="{{.GOLANGCILINT_VERSION}}"
        NEEDS_GCL_INSTALL=false
        if ! command -v golangci-lint >/dev/null 2>&1; then
          NEEDS_GCL_INSTALL=true
          echo "[INFO] golangci-lint not found."
        elif [ "$TARGET_GCL_VERSION" != "latest" ] && [ "$INSTALLED_GCL_VERSION" != "$TARGET_GCL_VERSION" ]; then
          NEEDS_GCL_INSTALL=true
          echo "[INFO] golangci-lint version mismatch. Found: $INSTALLED_GCL_VERSION, Target: $TARGET_GCL_VERSION."
        elif [ "$TARGET_GCL_VERSION" = "latest" ]; then
          # For 'latest', we might still want to update, but for now, just check existence
          echo "[INFO] golangci-lint found. Target is 'latest', not forcing update if present."
        else
          echo "[INFO] golangci-lint is already installed and at the target version ($INSTALLED_GCL_VERSION)."
        fi

        if [ "$NEEDS_GCL_INSTALL" = true ]; then
          echo "[INFO] Installing/Updating golangci-lint@$TARGET_GCL_VERSION..."
          GOBIN=$(go env GOBIN Default:$(go env GOPATH)/bin) go install github.com/golangci/golangci-lint/cmd/golangci-lint@$TARGET_GCL_VERSION && \
          echo "[SUCCESS] golangci-lint installed/updated: $(golangci-lint --version | awk '{print $4}')" || \
          (echo "[ERROR] golangci-lint installation/update failed." && exit 1)
        fi
      - |
        # Check for gotestsum
        INSTALLED_GTS_VERSION=$(gotestsum --version 2>/dev/null | awk -F'[ ,]+' '{print $3}') # Gets version like "v0.6.0"
        TARGET_GTS_VERSION="{{.GOTESTSUM_VERSION}}"
        NEEDS_GTS_INSTALL=false
        if ! command -v gotestsum >/dev/null 2>&1; then
          NEEDS_GTS_INSTALL=true
          echo "[INFO] gotestsum not found."
        elif [ "$TARGET_GTS_VERSION" != "latest" ] && [ "$INSTALLED_GTS_VERSION" != "$TARGET_GTS_VERSION" ]; then
          NEEDS_GTS_INSTALL=true
          echo "[INFO] gotestsum version mismatch. Found: $INSTALLED_GTS_VERSION, Target: $TARGET_GTS_VERSION."
        elif [ "$TARGET_GTS_VERSION" = "latest" ]; then
          echo "[INFO] gotestsum found. Target is 'latest', not forcing update if present."
        else
          echo "[INFO] gotestsum is already installed and at the target version ($INSTALLED_GTS_VERSION)."
        fi

        if [ "$NEEDS_GTS_INSTALL" = true ]; then
          echo "[INFO] Installing/Updating gotestsum@$TARGET_GTS_VERSION..."
          GOBIN=$(go env GOBIN Default:$(go env GOPATH)/bin) go install gotest.tools/gotestsum@$TARGET_GTS_VERSION && \
          echo "[SUCCESS] gotestsum installed/updated: $(gotestsum --version | awk -F'[ ,]+' '{print $3}')" || \
          (echo "[ERROR] gotestsum installation/update failed." && exit 1)
        fi
      - cmd: echo "[SUCCESS] Go tools check/installation complete."

  _check-gcp-project: # Internal task, not meant to be called directly by user typically
    internal: true
    interactive: true # Prevents running in non-interactive CI environments unless explicitly called
    cmds:
      - |
        PROJECT_ID_CHECK="{{.PROJECT_ID}}" # Get from vars
        if [ -z "$PROJECT_ID_CHECK" ]; then
          echo "[ERROR] Google Cloud Project ID not found. It's not set in 'gcloud config get-value project'." >&2
          echo "          Please set your project ID using 'gcloud config set project YOUR_PROJECT_ID'" >&2
          exit 1 # Fail the task
        fi
        echo "[INFO] Using Google Cloud Project ID: $PROJECT_ID_CHECK"

  deploy:
    desc: "Runs local checks, then submits build to Google Cloud for deployment."
    # The actual binary deployed is built by Docker inside Cloud Build, which uses linux/amd64.
    # The local `task all` run here primarily serves as a pre-flight check.
    cmds:
      - cmd: echo "[INFO] Starting full deployment process for {{.SERVICE_NAME}}..."
      - task: all # Runs all local checks, including native build.
      - task: check-vulns
      - task: _check-gcp-project # Ensures GCP project is configured in gcloud
      - |
        set -e # Exit immediately if a command exits with a non-zero status
        CONFIG_FILE_TO_USE=""
        if [ -f "{{.CLOUDBUILD_CONFIG_PATH}}" ]; then
            CONFIG_FILE_TO_USE="{{.CLOUDBUILD_CONFIG_PATH}}"
        elif [ -f "./cloudbuild.yaml" ]; then # Fallback to root cloudbuild.yaml if specific path not found
            echo "[WARN] Cloud Build config not found at {{.CLOUDBUILD_CONFIG_PATH}}, using ./cloudbuild.yaml" >&2
            CONFIG_FILE_TO_USE="./cloudbuild.yaml"
        else
            echo "[ERROR] Cloud Build config file not found at {{.CLOUDBUILD_CONFIG_PATH}} or ./cloudbuild.yaml" >&2
            exit 1
        fi
        echo "[INFO] Using Cloud Build config file: $CONFIG_FILE_TO_USE"
        # Log the substitutions that will be sent to Cloud Build, replacing commas for readability
        echo "[INFO] Submitting build to Google Cloud for project {{.PROJECT_ID}} with substitutions:"
        echo "                    {{.GCLOUD_BUILD_SUBSTITUTIONS | replace "," "\n                    "}}"

        gcloud builds submit . \
          --config="$CONFIG_FILE_TO_USE" \
          --project="{{.PROJECT_ID}}" \
          --substitutions="{{.GCLOUD_BUILD_SUBSTITUTIONS}}"

        BUILD_SUBMIT_STATUS=$? # Capture exit status of gcloud command
        if [ $BUILD_SUBMIT_STATUS -ne 0 ]; then
            echo "[ERROR] Google Cloud Build submission failed with status $BUILD_SUBMIT_STATUS." >&2
            exit $BUILD_SUBMIT_STATUS # Propagate failure
        fi
        echo "[INFO] Google Cloud Build submission completed successfully."
      - task: health-check # Perform health check after deployment
      - cmd: echo "[SUCCESS] Deployment and health check completed successfully for {{.SERVICE_NAME}}!"

  health-check:
    desc: "Performs a health check on the deployed service. EXPECTED_VERSION and EXPECTED_COMMIT can be overridden for manual checks via -V EXPECTED_VERSION=foo or by setting env vars."
    vars:
      # These defaults will use the git state of the environment where 'task health-check' is run.
      # When called by 'deploy', this means it uses the git state at the time 'deploy' was invoked.
      E_VERSION: "{{.EXPECTED_VERSION | default .VERSION_FROM_GIT}}"
      E_COMMIT: "{{.EXPECTED_COMMIT | default .COMMIT_HASH_FROM_GIT}}"
      URL: "{{.HEALTH_CHECK_URL}}" # Allow overriding the URL for manual checks (e.g., task health-check -V URL=http://...)
    cmds:
      - |
        set -e # Exit script on any command failure
        echo "[INFO] Starting health check for service '{{.SERVICE_NAME}}'..."

        URL_TO_CHECK_HC=""
        # Determine URL_TO_CHECK: Use provided URL var first, then try to get from gcloud.
        if [ -n "{{.URL}}" ]; then # Check if URL variable is non-empty
          URL_TO_CHECK_HC="{{.URL}}"
          echo "[INFO] Using provided HEALTH_CHECK_URL: $URL_TO_CHECK_HC"
        else
          echo "[INFO] HEALTH_CHECK_URL not set. Retrieving service URL from gcloud for service '{{.SERVICE_NAME}}' in region '{{.GCP_REGION}}' and project '{{.PROJECT_ID}}'..."
          # Ensure PROJECT_ID is available for gcloud command; _check-gcp-project should have run if part of deploy
          PROJECT_ID_FOR_GCLOUD="{{.PROJECT_ID}}"
          if [ -z "$PROJECT_ID_FOR_GCLOUD" ]; then
            echo "[WARN] PROJECT_ID var is empty for gcloud command, attempting to use configured default." >&2
            # gcloud will use default if not specified, but explicit is better.
          fi

          SERVICE_URL_HC=$(gcloud run services describe {{.SERVICE_NAME}} --platform=managed --region={{.GCP_REGION}} --project="$PROJECT_ID_FOR_GCLOUD" --format="value(status.url)" 2>/dev/null)
          
          if [ -z "$SERVICE_URL_HC" ]; then
            echo "[ERROR] Could not retrieve service URL for '{{.SERVICE_NAME}}' in region '{{.GCP_REGION}}' (Project: $PROJECT_ID_FOR_GCLOUD)." >&2
            echo "          Ensure the service is deployed and the name, region, and project ID are correct." >&2
            exit 1
          fi
          URL_TO_CHECK_HC="$SERVICE_URL_HC/health" # Assuming /health endpoint for the service
        fi

        echo "[INFO] Attempting health check on: $URL_TO_CHECK_HC"
        echo "[INFO] Health Check Expecting Version: '{{.E_VERSION}}', Expecting Commit: '{{.E_COMMIT}}'"

        SUCCESS=false
        MAX_RETRIES=5
        RETRY_DELAY=10 # seconds

        for i in $(seq 1 $MAX_RETRIES); do
          echo "[INFO] Health check attempt $i of $MAX_RETRIES..."
          # -f: fail silently (no output) on server errors.
          # -s: silent mode.
          # -S: show error message if -s is used and it fails.
          # -L: follow redirects.
          # --connect-timeout: max time for connection.
          # --max-time: max total time for operation.
          # -w: custom output format to get HTTP code.
          RESPONSE=$(curl -f -s -S -L --connect-timeout 5 --max-time 10 -w "\nHTTP_CODE:%{http_code}" "$URL_TO_CHECK_HC" || echo "ERROR_CURL_FAILED\nHTTP_CODE:0")
          BODY=$(echo "$RESPONSE" | sed '$d') # Get all but the last line (which is HTTP_CODE:...)
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1 | cut -d: -f2)

          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "[INFO] Health check attempt $i SUCCEEDED with HTTP 200."
            if command -v jq >/dev/null 2>&1; then
                echo "[INFO] jq found. Verifying version and commit in response body..."
                echo "Response Body: $BODY" # Log the body for debugging
                
                # Extract version and commit, providing a default if jq fails or path is not found
                RESPONSE_VERSION=$(echo "$BODY" | jq -r .version 2>/dev/null)
                RESPONSE_COMMIT=$(echo "$BODY" | jq -r .commit 2>/dev/null)

                echo "[INFO] Received Version: '$RESPONSE_VERSION', Received Commit: '$RESPONSE_COMMIT'"
                
                # Handle cases where jq might return "null" (as a string) if the field is missing or actually null
                if [ "$RESPONSE_VERSION" = "null" ] || [ -z "$RESPONSE_VERSION" ]; then RESPONSE_VERSION="<not_found_in_response>"; fi
                if [ "$RESPONSE_COMMIT" = "null" ] || [ -z "$RESPONSE_COMMIT" ]; then RESPONSE_COMMIT="<not_found_in_response>"; fi

                # Normalize expected versions for comparison, e.g. if git outputs "dev-from-git" and service reports "dev"
                EXPECTED_V_HC="{{.E_VERSION}}"
                if [ "{{.E_VERSION}}" = "dev-from-git" ] && [ "$RESPONSE_VERSION" = "dev" ]; then EXPECTED_V_HC="dev"; fi
                
                EXPECTED_C_HC="{{.E_COMMIT}}"
                if [ "{{.E_COMMIT}}" = "unknown-from-git" ] && [ "$RESPONSE_COMMIT" = "unknown" ]; then EXPECTED_C_HC="unknown"; fi
                
                if [ "$RESPONSE_VERSION" = "$EXPECTED_V_HC" ] && [ "$RESPONSE_COMMIT" = "$EXPECTED_C_HC" ]; then
                    echo "[SUCCESS] Health check PASSED. HTTP 200 and Version/Commit match."
                    SUCCESS=true; break
                else
                    echo "[WARNING] Health check HTTP 200 OK, but version/commit mismatch or JSON parse error." >&2
                    echo "           Expected V:'$EXPECTED_V_HC' C:'$EXPECTED_C_HC'." >&2
                    echo "           Got      V:'$RESPONSE_VERSION' C:'$RESPONSE_COMMIT'." >&2
                    # For this template, consider HTTP 200 as primary health success. Version matching is a bonus.
                    # If strict version matching is required for health, set SUCCESS=false here.
                    SUCCESS=true; break 
                fi
            else
                echo "[SUCCESS] Health check PASSED with HTTP 200 (jq not available for detailed version/commit check)."
                SUCCESS=true; break # Exit loop on success
            fi
          else
            echo "[WARN] Health check attempt $i FAILED with HTTP Code: $HTTP_CODE." >&2
            echo "         Response Body (if any): $BODY" >&2
          fi

          if [ $i -lt $MAX_RETRIES ]; then echo "[INFO] Retrying in $RETRY_DELAY seconds..."; sleep $RETRY_DELAY; fi
        done

        if [ "$SUCCESS" = "false" ]; then
            echo "[ERROR] Health check FAILED for $URL_TO_CHECK_HC after $MAX_RETRIES attempts. Last HTTP Code: $HTTP_CODE." >&2
            exit 1 # Exit with failure status
        else
            echo "[INFO] Health check successfully completed for $URL_TO_CHECK_HC."
        fi
