# ./build/cloudbuild/cloudbuild.yaml
substitutions:
  _SERVICE_NAME: "hello-tool-base"
  _REGION: "us-central1" # Ensure this is your desired GCP region
  _ARTIFACT_REGISTRY_REPO: "my-go-apps" # Ensure this is your Artifact Registry repo name
  _MODULE_PATH: "github.com/dkoosis/hello-tool-base" # Must match your go.mod and Makefile
  # These will be populated by the Makefile's `gcloud builds submit --substitutions`
  _MAKEFILE_VERSION: "dev" # Default value if not provided by Makefile
  _MAKEFILE_COMMIT: "unknown" # Default value if not provided by Makefile
  # TAG_NAME and SHORT_SHA are Cloud Build built-in substitutions.

steps:
  # Step 0: Diagnostic Echo (Optional, but helps confirm substitutions)
  # This step explicitly uses the placeholders to ensure Cloud Build's parser sees them.
  - name: "ubuntu" # Use a simple image with echo
    entrypoint: "bash"
    args:
      - -c
      - |
        echo "--- Diagnostics ---"
        echo "Service Name: ${_SERVICE_NAME}"
        echo "Region: ${_REGION}"
        echo "Artifact Repo: ${_ARTIFACT_REGISTRY_REPO}"
        echo "Module Path (from substitution): ${_MODULE_PATH}"
        echo "Makefile Version (from substitution): ${_MAKEFILE_VERSION}"
        echo "Makefile Commit (from substitution): ${_MAKEFILE_COMMIT}"
        echo "Cloud Build Commit SHA (built-in): ${SHORT_SHA}"
        echo "Cloud Build Tag Name (built-in): ${TAG_NAME}"
        echo "-------------------"
    id: "Diagnostic Echo"

  # Step 1: Build the container image
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"
      - "-f"
      - "build/package/Dockerfile" # Specify the path
      # Pass Cloud Build substitutions as Docker build ARGs
      - "--build-arg"
      # Priority: 1. _MAKEFILE_VERSION (from make deploy), 2. TAG_NAME (Cloud Build built-in), 3. Dockerfile ARG default
      - "BUILD_VERSION=${_MAKEFILE_VERSION:-${TAG_NAME:-dev-cloudbuild}}" # Using _MAKEFILE_VERSION
      - "--build-arg"
      # Priority: 1. _MAKEFILE_COMMIT (from make deploy), 2. SHORT_SHA (Cloud Build built-in), 3. Dockerfile ARG default
      - "BUILD_COMMIT=${_MAKEFILE_COMMIT:-${SHORT_SHA:-unknown}}" # Using _MAKEFILE_COMMIT
      - "--build-arg"
      # Explicitly pass _MODULE_PATH as a build-arg
      - "MODULE_PATH=${_MODULE_PATH}" # Using _MODULE_PATH
      - "." # Build context
    id: "Build Docker Image"
    waitFor: ["Diagnostic Echo"] # Wait for diagnostics if you keep that step

  # Step 2: Push the container image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args: ["push", "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"]
    id: "Push to Artifact Registry"
    waitFor: ["Build Docker Image"]

  # Step 3: Deploy container image to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"
      - "--region"
      - "${_REGION}"
      - "--platform"
      - "managed"
      - "--ingress=all"
      - "--allow-unauthenticated" # Remove for private services
      - "--project=$PROJECT_ID"
      - "--set-env-vars=SERVICE_NAME=${_SERVICE_NAME}"
    # Example of using other substitutions defined above for env vars if needed by your app:
    # You could pass _MODULE_PATH or _MAKEFILE_VERSION to the running service if required:
    # Example explicitly using the placeholders again:
    # - '--update-env-vars=MODULE_PATH_CONFIG=${_MODULE_PATH},APP_VERSION=${_MAKEFILE_VERSION:-${TAG_NAME:-dev-cloudbuild}}'
    id: "Deploy to Cloud Run"
    waitFor: ["Push to Artifact Registry"]

  # Step 4: (Optional) Tag the image with a specific commit SHA for versioning
  - name: "gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Determine the tag: use _MAKEFILE_COMMIT if available, else use SHORT_SHA, else a timestamped manual tag
        # Using ${_MAKEFILE_COMMIT} here
        if [ -n "${_MAKEFILE_COMMIT}" ] && [ "${_MAKEFILE_COMMIT}" != "unknown" ]; then
          FINAL_TAG_NAME="${_MAKEFILE_COMMIT}"
        elif [ -n "${SHORT_SHA}" ]; then
          FINAL_TAG_NAME="${SHORT_SHA}"
        else
          FINAL_TAG_NAME="manual-build-$(date -u +%Y%m%d%H%M%S)"
        fi

        echo "Tagging image '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest' with tag: $${FINAL_TAG_NAME}"
        gcloud artifacts docker tags add \
          '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest' \
          '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:$${FINAL_TAG_NAME}' \
          --project=$PROJECT_ID || echo "Warning: Tagging image with $${FINAL_TAG_NAME} failed, continuing build."
    id: "Tag Image with Specific Commit SHA"
    allowFailure: true
    waitFor: ["Deploy to Cloud Run"] # Wait for deploy before tagging

images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"

options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'E2_HIGHCPU_8' # Optional
