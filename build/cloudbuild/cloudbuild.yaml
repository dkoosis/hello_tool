# ./build/cloudbuild/cloudbuild.yaml
substitutions:
  _SERVICE_NAME: "hello-tool-base"
  _REGION: "us-central1" # Ensure this is your desired GCP region
  _ARTIFACT_REGISTRY_REPO: "my-go-apps" # Ensure this is your Artifact Registry repo name
  _MODULE_PATH: "github.com/dkoosis/hello-tool-base" # Must match your go.mod

  # These substitutions are populated by your Taskfile's 'gcloud builds submit --substitutions' command
  # using the VERSION_FROM_GIT and COMMIT_HASH_FROM_GIT variables from Taskfile.yaml.
  _MAKEFILE_VERSION: "dev" # Default, but overridden by Taskfile
  _MAKEFILE_COMMIT: "unknown" # Default, but overridden by Taskfile
  # TAG_NAME and SHORT_SHA are Cloud Build built-in substitutions.
  # They will be used if the build is triggered by a git push to a connected repository
  # and if _MAKEFILE_COMMIT is not overriding them for tagging logic.

steps:
  # Step 0: Diagnostic Echo (Verifies substitutions in Cloud Build environment)
  - name: "ubuntu"
    entrypoint: "bash"
    id: "Diagnostic Echo"
    args:
      - -c
      - |
        echo "--- Diagnostics (Cloud Build Environment) ---"
        echo "Service Name: ${_SERVICE_NAME}"
        echo "Region: ${_REGION}"
        echo "Artifact Repo: ${_ARTIFACT_REGISTRY_REPO}"
        echo "Module Path (from Taskfile substitution): ${_MODULE_PATH}"
        echo "Version for Build (from Taskfile _MAKEFILE_VERSION): ${_MAKEFILE_VERSION}"
        echo "Commit for Build (from Taskfile _MAKEFILE_COMMIT): ${_MAKEFILE_COMMIT}"
        echo "Cloud Build Commit SHA (built-in, if applicable): ${SHORT_SHA}"
        echo "Cloud Build Tag Name (built-in, if applicable): ${TAG_NAME}"
        echo "-------------------"

  # Step 1: Build the container image using Docker
  # This step uses the Dockerfile that directly runs 'go build'.
  - name: "gcr.io/cloud-builders/docker"
    id: "Build Docker Image"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"
      - "-f"
      - "build/package/Dockerfile" # Path to your Dockerfile
      # Pass Cloud Build substitutions (sourced from Taskfile's git info) as Docker build ARGs.
      # These ARGs will be used by the Dockerfile to construct LDFLAGS for 'go build'.
      - "--build-arg"
      - "BUILD_VERSION=${_MAKEFILE_VERSION}" # Value from Taskfile's VERSION_FROM_GIT
      - "--build-arg"
      - "BUILD_COMMIT=${_MAKEFILE_COMMIT}" # Value from Taskfile's COMMIT_HASH_FROM_GIT
      - "--build-arg"
      - "MODULE_PATH=${_MODULE_PATH}" # Value from Taskfile
      # Optional: Pass build date from Cloud Build worker, or let Dockerfile generate it.
      # If passing, ensure Dockerfile has ARG BUILD_DATE_ARG.
      # - "--build-arg"
      # - "BUILD_DATE_ARG=$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
      - "." # Build context (root of your repository)
    waitFor: ["Diagnostic Echo"] # Optional: wait for diagnostics

  # Step 2: Push the container image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    id: "Push to Artifact Registry"
    args:
      [
        "push",
        "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest",
      ]
    waitFor: ["Build Docker Image"]

  # Step 3: Deploy container image to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
    id: "Deploy to Cloud Run"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"
      - "--region"
      - "${_REGION}"
      - "--platform"
      - "managed"
      - "--ingress=all"
      - "--allow-unauthenticated" # Consider security implications; remove for private services
      - "--project=$PROJECT_ID"
      - "--set-env-vars=SERVICE_NAME=${_SERVICE_NAME}" # Example environment variable
      # You could pass the resolved versions to the running service if needed:
      # - "--update-env-vars=APP_VERSION=${_MAKEFILE_VERSION},APP_COMMIT=${_MAKEFILE_COMMIT}"
    waitFor: ["Push to Artifact Registry"]

  # Step 4: (Optional) Tag the 'latest' image with a specific commit SHA or tag for versioning
  - name: "gcr.io/google.com/cloudsdktool/google-cloud-cli:latest"
    id: "Tag Image with Specific Commit SHA"
    entrypoint: "bash"
    allowFailure: true # Optional: Don't fail the build if tagging fails
    args:
      - "-c"
      - |
        set -e # Exit on error for this script block
        # Determine the tag: prioritize _MAKEFILE_COMMIT (from Taskfile git), then built-in SHORT_SHA.
        if [ -n "${_MAKEFILE_COMMIT}" ] && [ "${_MAKEFILE_COMMIT}" != "unknown" ] && [ "${_MAKEFILE_COMMIT}" != "unknown-from-git" ]; then
          FINAL_TAG="${_MAKEFILE_COMMIT}"
        elif [ -n "${SHORT_SHA}" ]; then
          FINAL_TAG="${SHORT_SHA}"
        else
          echo "Warning: Cannot determine a specific commit SHA for tagging. _MAKEFILE_COMMIT is '${_MAKEFILE_COMMIT}' and SHORT_SHA is empty."
          # As a fallback, could use _MAKEFILE_VERSION if it's not 'dev' or 'dev-from-git'
          if [ -n "${_MAKEFILE_VERSION}" ] && [ "${_MAKEFILE_VERSION}" != "dev" ] && [ "${_MAKEFILE_VERSION}" != "dev-from-git" ]; then
            echo "Using _MAKEFILE_VERSION ('${_MAKEFILE_VERSION}') as tag."
            FINAL_TAG="${_MAKEFILE_VERSION}"
          else
            echo "Skipping specific commit/version tagging for the image."
            exit 0 # Exit successfully if no suitable tag found
          fi
        fi

        echo "Tagging image '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest' with tag: $${FINAL_TAG}"
        gcloud artifacts docker tags add \
          "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest" \
          "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:$${FINAL_TAG}" \
          --project="$PROJECT_ID"
    waitFor: ["Deploy to Cloud Run"] # Wait for deploy before tagging

images:
  # This lists images that will be built by Cloud Build, useful for some integrations.
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_ARTIFACT_REGISTRY_REPO}/${_SERVICE_NAME}:latest"

options:
  logging: CLOUD_LOGGING_ONLY
  # machineType: 'E2_HIGHCPU_8'  # Optional: Uncomment to specify a machine type for the build
